# This workflow builds and analyzes a .NET project with SonarQube.
# It's configured to use the existing solution file for the analysis.
# This ensures all projects referenced in the solution are correctly analyzed.


name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze solution
        env:
          # The SONAR_TOKEN secret is stored in your repository's settings.
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Begin the SonarQube analysis, pointing directly to your solution file.
          # The sonar.cs.solution property tells the scanner which solution to analyze.
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"TesisEnel_SwiftPay-Aaron-Ap1" /o:"tesisenel" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.solution="SwiftPay/SwiftPay.sln"
          
          # Build your specific solution. The SonarScanner will wrap this build process,
          # analyzing all the projects that are compiled.
          dotnet build "SwiftPay/SwiftPay.sln"
          
          # End the SonarQube analysis and upload the results.
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
