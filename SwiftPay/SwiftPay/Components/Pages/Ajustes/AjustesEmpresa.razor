@page "/ajustesEmpresa"


@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService


@inject EmpresaService EmpresaService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
<RadzenNotification />

<PageTitle>Datos de la empresa</PageTitle>

@if (acceso == "permitido")
{
	<EditForm Model="empresa" OnValidSubmit="Guardar">
		<DataAnnotationsValidator />

		<div class="card" style="border-radius: 20px;">

			<div class="card-header bg-primary" style="border-radius: 20px 20px 0px 0px;">
				<div class="row text-center text-white">
					<h3>Datos de la Empresa</h3>
				</div>
			</div>

			<div class="card-body">

				<div class="d-flex justify-content-center">
					<div class="row">
						<div class="input-group">
							<img class="text-center" style="width: 150px; height: 120px; border-radius: 10%;" src="@obtenerLogotipo()" />
							<label class="btn btn-dark" style="height: 40px; margin-top: 40px;">
								<InputFile style="display: none;" accept=".png,.jpg,.jpeg" OnChange="cambiarImagen" /> Cambiar
							</label>
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-6">
						<label class="fw-bold">Nombre de Empresa:</label>
						<InputText class="form-control" @bind-Value="empresa.Nombre"></InputText>
						<ValidationMessage For="@(() => empresa.Nombre)" />
					</div>
					<div class="col-6">
						<label class="fw-bold">RNC:</label>
						<InputText class="form-control" @bind-Value="empresa.RNC"></InputText>
						<ValidationMessage For="@(() => empresa.RNC)" />
					</div>
				</div>

				<div class="row">
					<div class="col-4">
						<label class="fw-bold">Télefono:</label>
						<InputText class="form-control" @bind-Value="empresa.Telefono"></InputText>
						<ValidationMessage For="@(() => empresa.Telefono)" />
					</div>
					<div class="col-4">
						<label class="fw-bold">Correo Electronico</label>
						<InputText class="form-control" @bind-Value="empresa.CorreoElectronico"></InputText>
						<ValidationMessage For="@(() => empresa.CorreoElectronico)" />
					</div>
					<div class="col-4">
						<label class="fw-bold">Impresora</label>
						<select class="form-select" @bind="empresa.Impresora">
							<option value="58mm">58mm</option>
							<option value="80mm">80mm</option>
						</select>
					</div>
				</div>

				<div class="row">
					<label class="fw-bold">Dirección</label>
					<InputTextArea class="form-control" @bind-Value="empresa.Direccion"></InputTextArea>
					<ValidationMessage For="@(() => empresa.Direccion)" />

					<label class="fw-bold">Nota de Factura</label>
					<InputTextArea class="form-control" @bind-Value="empresa.NotaFactura"></InputTextArea>
					<ValidationMessage For="@(() => empresa.NotaFactura)" />
				</div>
			</div>

			<div class="card-footer">
				<div class="text-end">
					<button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar</button>
				</div>
			</div>
		</div>
	</EditForm>
}

else if(acceso == "denegado")
{

<style>

	.container {
		text-align: center;
		max-width: 600px;
		padding: 10px;
		background-color: #fff;
		border-radius: 10px;
		box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
		margin-top: 18%;
	}

		.container h1 {
			font-size: 2.5rem;
			color: #333;
			margin-bottom: 20px;
		}

		.container p {
			font-size: 1.2rem;
			color: #666;
			margin-bottom: 30px;
		}

		.container i {
			font-size: 4rem;
			color: #f44336;
		}
</style>


<div class="container">
	<i class="fas fa-exclamation-triangle"></i>
	<h1>ACCESO RESTRINGIDO</h1>
	<p>Disculpa las molestias, usted no tiene acceso a este apartado, no consta de suficientes permisos.</p>
	<p>¡Regrese mas tarde!</p>
</div>
}





@code {


	public string acceso = "";

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			var buscado = await AutentificacionService.usuarioActual(JSRuntime, UsuariosService);
			if (buscado != null)
			{
				if (buscado.Rol == "Administrador")
				{
					acceso = "permitido";
				}
				else
				{
					acceso = "denegado";
				}
				StateHasChanged();
			}
			else
			{
				await AutentificacionService.CerrarSesion(JSRuntime);
			}
		}
	}



	public Empresa empresa = new Empresa();

	protected override async Task OnInitializedAsync()
	{
		var busqueda = await EmpresaService.Buscar(1);
		if (busqueda != null)
		{
			empresa = busqueda;
		}
		else
		{
			empresa.Impresora = "58mm";
		}
	}

	public string obtenerLogotipo()
	{
		if (empresa.Imagen != null && empresa.Imagen.Length > 0)
		{
			string base64String = Convert.ToBase64String(empresa.Imagen);
			return $"data:image/png;base64,{base64String}";
		}
		else
		{
			return "imagenes/sinLogo.jpg";
		}
	}

	public async Task cambiarImagen(InputFileChangeEventArgs e)
	{
		var archivo = e.File;
		if (archivo != null)
		{
			var stream = archivo.OpenReadStream();
			using (var memoryStream = new MemoryStream())
			{
				await stream.CopyToAsync(memoryStream);
				empresa.Imagen = memoryStream.ToArray();
			}
		}
	}


	public async Task Guardar()
	{
		var guardado = await EmpresaService.Guardar(this.empresa);
		if (guardado)
		{
			Mensaje("Existoso", "Guardado con exito!", 4000, "Exito");
		}
		else
		{
			Mensaje("Error", "Hubo un error al guardar los datos!", 4000, "Error");
		}
	}



	public void Mensaje(string cabecera, string mensaje, int tiempo, string tipo)
	{
		NotificationMessage objetoMensaje = null;

		if (tipo == "Advertencia")
		{
			objetoMensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Warning,
					Summary = cabecera,
					Detail = mensaje,
					Duration = tiempo
				};
		}
		else if (tipo == "Exito")
		{
			objetoMensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = cabecera,
					Detail = mensaje,
					Duration = tiempo
				};
		}
		else if(tipo == "Error")
		{
			objetoMensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = cabecera,
					Detail = mensaje,
					Duration = tiempo
				};
		}

		NotificationService.Notify(objetoMensaje);
	}


}



