@page "/consultaHistorialSalidaCaja"


@inject SalidaCajaService SalidaCajaService

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService

<PageTitle>Datos Salida de Caja</PageTitle>

@if (acceso == "permitido")
{
	<div class="card" style="border-radius: 20px;">

		<div class="card-header bg-primary" style="border-radius: 20px 20px 0px 0px;">
			<div class="row text-white text-center">
				<h3>Datos salida de caja</h3>
			</div>
		</div>

		<div class="card-body">
			<div class="row mb-4">
				<div class="col-3">
					<label class="fw-bold">Filtrar por:</label>
					<select class="form-select" @bind="filtro">
						<option value="1">Asunto</option>
						<option value="2">Fecha</option>
					</select>
				</div>

				@if(filtro == "1")
				{
					<div class="col">
						<label class="fw-bold">Búsqueda:</label>
						<div class="input-group">
							<InputText class="form-control" @bind-Value="busqueda" placeholder="Buscar"></InputText>
							<button class="btn btn-outline-primary" @onclick="Buscar"><i class="fas fa-search"></i> Buscar</button>
						</div>
					</div>
				}
				else
				{
					<div class="col-5">
						<label class="fw-bold">Rango:</label>
						<div class="input-group">
							<InputDate @bind-Value="fechainicio" class="form-control"></InputDate>
							<InputDate @bind-Value="fechafinal" class="form-control"></InputDate>
							<button type="button" class="btn btn-primary fas fa-search" @onclick="Filtrar">Buscar</button>
						</div>
					</div>
				}
			</div>

			<table class="table table-bordered text-center">
				<thead class="bg-primary text-white">
					<tr>
						<th>Asunto</th>
						<th>Monto</th>
						<th>Fecha</th>
						<th>Ver</th>
					</tr>
				</thead>
				<tbody>
					@if (ListaSalidaCaja.Any())
					{
						@foreach (var item in ListaSalidaCaja)
						{
							<tr>
								<td>@item.Asunto</td>
								<td>@item.Monto.ToString("N2")</td>
								<td>@item.Fecha.ToString("dd/MM/yyyy")</td>
								<td>
									<a href="verSalidaCaja/@item.CajaId">
										<img style="width: 28px; height: 28px;" src="iconos/ico_ver.png" />
									</a>
								</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="8" class="text-center">No se ha encontrado gastos</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

else if (acceso == "denegado")
{

	<style>

		.container {
		text-align: center;
		max-width: 600px;
		padding: 10px;
		background-color: #fff;
		border-radius: 10px;
		box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
		margin-top: 18%;
		}

		.container h1 {
		font-size: 2.5rem;
		color: #333;
		margin-bottom: 20px;
		}

		.container p {
		font-size: 1.2rem;
		color: #666;
		margin-bottom: 30px;
		}

		.container i {
		font-size: 4rem;
		color: #f44336;
		}
	</style>


	<div class="container">
		<i class="fas fa-exclamation-triangle"></i>
		<h1>ACCESO RESTRINGIDO</h1>
		<p>Disculpa las molestias, usted no tiene acceso a este apartado, no consta de suficientes permisos.</p>
		<p>¡Regrese mas tarde!</p>
	</div>
}



@code {

	public string acceso = "";

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			var buscado = await AutentificacionService.usuarioActual(JSRuntime, UsuariosService);
			if (buscado != null)
			{
				if (buscado.Rol == "Gerente" || buscado.Rol == "Cobrador" || buscado.Rol == "Administrador")
				{
					acceso = "permitido";
				}
				else
				{
					acceso = "denegado";
				}
				StateHasChanged();
			}
			else
			{
				await AutentificacionService.CerrarSesion(JSRuntime);
			}
		}
	}


	private string filtro = "1", busqueda = "";

	public List<SalidaCaja> ListaSalidaCaja = new List<SalidaCaja>();

	public DateTime fechainicio { get; set; }
	public DateTime fechafinal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaSalidaCaja = await SalidaCajaService.Listar(c => true);
		fechafinal = DateTime.Now;
		fechainicio = DateTime.Now;
	}

	public async Task Filtrar()
	{
		ListaSalidaCaja = await SalidaCajaService.Listar(s => s.Fecha <= fechafinal && s.Fecha >= fechainicio);
	}

	public async Task Buscar()
	{
		if (filtro == "1" && busqueda != "")
		{
			ListaSalidaCaja = await SalidaCajaService.Listar(c => c.Asunto == busqueda);
		}
		if (busqueda == "")
		{
			ListaSalidaCaja = await SalidaCajaService.Listar(p => true);
		}
	}

}

