@page "/verSalidaCaja"
@page "/verSalidaCaja/{SalidaCajaID:int}"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject SalidaCajaService SalidaCajaService
@inject UsuariosService UsuariosService

@inject IJSRuntime JSRuntime
@inject AutentificacionService AutentificacionService


<PageTitle>Datos del Gasto</PageTitle>
@if (acceso == "permitido")
{
<div class="card" style="border-radius: 20px;">
	<div class="card-header bg-primary text-center" style="border-radius: 20px 20px 0px 0px;">
		<div class="row text-white">
			<h3>Datos del Gasto</h3>
		</div>
	</div>

	<div class="card-body">

		<div class="row text-center">
			<div>
				<label class="fw-bold">Asunto:</label>
				<span>@salidacaja.Asunto</span>
			</div>
			<div >
				<label class="fw-bold">Monto:</label>
				<span>@salidacaja.Monto.ToString("N2")</span>
			</div>
			<div >
				<label class="fw-bold">Usuario:</label>
				<span>@usuarioNombre</span>
			</div>
			<div >
				<label class="fw-bold">Fecha:</label>
				<span>@salidacaja.Fecha.ToString("dd/MM/yyyy")</span>
			</div>
			<div>
				<label class="fw-bold">Nota:</label>
				<span>@salidacaja.Nota</span>
			</div>
		</div>


	</div>

	<div class="card-footer">
		<div class="text-end">
			<a href="consultaHistorialSalidaCaja" class="btn btn-danger"><i class="fas fa-reply"></i> Retroceder</a>
		</div>
	</div>

</div>

}

else if(acceso == "denegado")
{

<style>

	.container {
		text-align: center;
		max-width: 600px;
		padding: 10px;
		background-color: #fff;
		border-radius: 10px;
		box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
		margin-top: 18%;
	}

		.container h1 {
			font-size: 2.5rem;
			color: #333;
			margin-bottom: 20px;
		}

		.container p {
			font-size: 1.2rem;
			color: #666;
			margin-bottom: 30px;
		}

		.container i {
			font-size: 4rem;
			color: #f44336;
		}
</style>


<div class="container">
	<i class="fas fa-exclamation-triangle"></i>
	<h1>ACCESO RESTRINGIDO</h1>
	<p>Disculpa las molestias, usted no tiene acceso a este apartado, no consta de suficientes permisos.</p>
	<p>¡Regrese mas tarde!</p>
</div>
}






@code {

	public string acceso = "";

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			var buscado = await AutentificacionService.usuarioActual(JSRuntime, UsuariosService);
			if (buscado != null)
			{
				if (buscado.Rol == "Gerente" || buscado.Rol == "Cobrador" || buscado.Rol == "Administrador")
				{
					acceso = "permitido";
				}
				else
				{
					acceso = "denegado";
				}
				StateHasChanged();
			}
			else
			{
				await AutentificacionService.CerrarSesion(JSRuntime);
			}
		}
	}


	public SalidaCaja salidacaja = new SalidaCaja();
	public Usuarios usuario = new Usuarios();

	private string usuarioNombre = "";

	[Parameter]
	public int SalidaCajaID { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (SalidaCajaID > 0)
		{
			salidacaja = await SalidaCajaService.Buscar(SalidaCajaID);

			usuario = await UsuariosService.Buscar(salidacaja.UsuarioId);
			if(usuario != null)
			{
				usuarioNombre = usuario.Nombre + " " + usuario.Apellido;
			}
			else
			{
				usuarioNombre = "Usuario asociado borrado";
			}
		}
	}

}
