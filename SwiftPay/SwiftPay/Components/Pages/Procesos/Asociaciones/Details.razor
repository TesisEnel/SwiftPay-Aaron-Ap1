@page "/detailsAsociacion"
@page "/detailsAsociacion/{AsociacionID:int}"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AsociacionesService AsociacionesService


@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService

<PageTitle>Detalles de la Asociacion</PageTitle>
@if (acceso == "permitido")
{
<div class="card" style="border-radius: 20px;">
	<div class="card-header bg-primary text-center" style="border-radius: 20px 20px 0px 0px;">
			<div class="row text-white">
			<h3>Detalles de la Asociacion</h3>
			</div>
		</div>

		<div class="card-body">
			<div class="row">
				<div class="col">
					<label class="fw-bold">Nombre:</label>
					<span>@asociacion.Nombre</span>
				</div>
			</div>
		</div>

		<div class="card-footer">
			<div class="text-end">
			<a href="centroAsociaciones" class="btn btn-danger"><i class="fas fa-reply"></i> Retroceder</a>
			</div>
		</div>

	</div>
}
else if(acceso == "denegado")
{

<style>

	.container {
		text-align: center;
		max-width: 600px;
		padding: 10px;
		background-color: #fff;
		border-radius: 10px;
		box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
		margin-top: 18%;
	}

		.container h1 {
			font-size: 2.5rem;
			color: #333;
			margin-bottom: 20px;
		}

		.container p {
			font-size: 1.2rem;
			color: #666;
			margin-bottom: 30px;
		}

		.container i {
			font-size: 4rem;
			color: #f44336;
		}
</style>


<div class="container">
	<i class="fas fa-exclamation-triangle"></i>
	<h1>ACCESO RESTRINGIDO</h1>
	<p>Disculpa las molestias, usted no tiene acceso a este apartado, no consta de suficientes permisos.</p>
	<p>¡Regrese mas tarde!</p>
</div>
}


@code {

	public string acceso = "";

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			var buscado = await AutentificacionService.usuarioActual(JSRuntime, UsuariosService);
			if (buscado != null)
			{
				if (buscado.Rol == "Gerente" || buscado.Rol == "Administrador")
				{
					acceso = "permitido";
				}
				else
				{
					acceso = "denegado";
				}
				StateHasChanged();
			}
			else
			{
				await AutentificacionService.CerrarSesion(JSRuntime);
			}
		}
	}

	public Asociaciones asociacion = new Asociaciones();

	[Parameter]
	public int AsociacionID { get; set;  }

	protected override async Task OnInitializedAsync()
	{
		if (AsociacionID > 0)
		{
			asociacion = await AsociacionesService.Buscar(AsociacionID);
		}
	}
}
